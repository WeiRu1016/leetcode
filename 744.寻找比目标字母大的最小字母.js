/*
 * @lc app=leetcode.cn id=744 lang=javascript
 *
 * [744] 寻找比目标字母大的最小字母
 */

// @lc code=start
/**
 * @param {character[]} letters
 * @param {character} target
 * @return {character}
 */
var nextGreatestLetter = function (letters, target) {
  let start = 0;
  let end = letters.length - 1;
  let last = end;
  while (start <= end) {
    const mid = Math.floor((start + end) / 2);
    if (letters[mid] <= target) {
      start = mid + 1;
    } else {
      last = mid;
      end = mid - 1;
    }
  }
  if (letters[last] > target) {
    return letters[last];
  }
  return letters[0];
};
console.log(
  nextGreatestLetter(
    [
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "l",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
      "o",
    ],
    "a"
  )
);
console.log(nextGreatestLetter(["c", "f", "j"], "a"));
console.log(nextGreatestLetter(["c", "f", "j"], "c"));
// @lc code=end
